[project]
name = "Collective-Modding-Toolkit"
authors = [{ name = "wxMichael" }]
license = "GPL-2.0-or-later"
description = "A toolkit for troubleshooting and optimizing your mod setup for Fallout 4, purpose-built for the Collective Modding Discord Community."
version = "0.5.1"
readme = "README.md"
requires-python = ">=3.11,<3.12"

[project.urls]
homepage = "https://www.nexusmods.com/fallout4/mods/87907"
repository = "https://github.com/wxMichael/Collective-Modding-Toolkit"
issues = "https://github.com/wxMichael/Collective-Modding-Toolkit/issues"
changelog = "https://github.com/wxMichael/Collective-Modding-Toolkit/blob/main/CHANGELOG.md"
download = "https://github.com/wxMichael/Collective-Modding-Toolkit/releases/latest/download/cm-toolkit.zip"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
packaging = ">=25.0"
psutil = ">=7.0.0"
pywin32 = ">=311"
pywin32-ctypes = ">=0.2.3"
pyxdelta = ">=0.2.0"
requests = ">=2.32.3"
pillow = ">=11.1.0"
chardet = ">=5.2.0"
pyside6 = "^6.9.1"

[tool.poetry.group.dev.dependencies]
mypy = ">=1.14.1"
types-psutil = ">=7.0.0.20250801"
types-pywin32 = ">=311.0.0.20250801"
types-requests = ">=2.32.4.20250611"
setuptools = ">=80.9.0"
ruff = ">=0.12"
pyright = "^1.1.403"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-pyinstaller-plugin]
use-poetry-install = true
include = { "src/assets" = "assets" }

[tool.poetry-pyinstaller-plugin.scripts]
cm-toolkit = { source = "src/main.py", type = "onedir", icon = "src/icon.ico", windowed = true, console = false }

[tool.mypy]
enable_incomplete_feature = ["NewGenericSyntax"]
disable_error_code = [
	"arg-type",         # Redundant with Pyright reportArgumentType
	"import-untyped",
	"index",            # Redundant with Pyright reportIndexIssue
	"name-defined",     # Redundant with Ruff F821
	"operator",         # Redundant with Pyright reportOperatorIssue
	"literal-required",
]

[[tool.mypy.overrides]]
module = ["pyxdelta"]
ignore_missing_imports = true

[tool.pyright]
typeCheckingMode = "strict"
reportUnknownMemberType = false
reportWildcardImportFromLibrary = false
reportAssignmentType = false            # Redundant with Mypy assignment
reportMissingParameterType = false      # Redundant with Ruff ANN001
reportReturnType = false                # Redundant with Mypy return-type
reportUndefinedVariable = false         # Redundant with Ruff F821
reportUnusedImport = false              # Redundant with Ruff F401
reportUnusedVariable = false            # Redundant with Ruff F841

[tool.ruff]
extend-exclude = []
indent-width = 4
line-length = 130

[tool.ruff.format]
preview = true
indent-style = "tab"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
preview = true
extend-select = [
	"A",     # Builtin Shadowing
	"ANN",   # Type Annotations
	"ARG",   # Unused Arguments
	"ASYNC", # Async Suggestions
	"B",     # Bugs/Design Problems
	"BLE",   # Blind Except
	"C4",    # Comprehensions
	# "C901",  # Complex Structures
	"COM", # Commas
	# "D",     # pydocstyle
	# "DTZ",   # Unsafe/Naive Datetimes
	"EM",   # Exception Messages
	"FA",   # Future Annotations
	"FBT",  # Boolean Traps
	"FLY",  # F-Strings
	"FURB", # Modernization
	"G",    # Logging Formatting
	"I",    # Import Sorting
	"ICN",  # Import Naming Conventions
	"INT",  # gettext
	"ISC",  # Implicit String Concatenation
	"LOG",  # Logging
	"N",    # PEP8 Naming Conventions
	"PERF", # Performance Anti-Patterns
	"PGH",  # PyGrep Hooks
	"PIE",  # Misc Lints
	"PL",   # Pylint
	"PT",   # PyTest
	"PTH",  # Prefer Pathlib
	"PYI",  # Stub Files
	"Q",    # Quotes
	"RET",  # Return
	"RSE",  # Raise
	"RUF",  # Ruff
	# "S",     # Security Testing
	"SIM", # Simplify
	"SLF", # Self
	# "T20",   # print
	"TC",  # Type Checking
	"TID", # Tidy Imports
	"TRY", # Exception Anti-Patterns
	"UP",  # pyupgrade (New Syntax Suggestions)
]

ignore = [
	"E501",    # Duplicate of B950 line-too-long
	"E722",    # Duplicate of B001 bare-except
	"F403",    # undefined-local-with-import-star
	"F405",    # undefined-local-with-import-star-usage
	"PLR0904", # too-many-public-methods
	"PLR0912", # too-many-branches
	"PLR0913", # too-many-arguments
	"PLR0914", # too-many-locals
	"PLR0915", # too-many-statements
	"PLR0917", # too-many-positional-arguments
	"PLR1702", # too-many-nested-blocks
	"PLR2004", # magic-value-comparison
	"PYI021",  # docstring-in-stub
	"PYI051",  # redundant-literal-union
	"S606",    # start-process-with-no-shell
	"FBT002",  # boolean-trap
	"FBT001",  # boolean-trap
]
[tool.ruff.per-file-ignores]
"src/qt_compat.py" = [
	"F401",  # Unused import
]